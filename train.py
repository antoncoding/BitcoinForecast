import numpy as npimport pandas as pdimport sysfrom keras.optimizers import RMSpropfrom keras.callbacks import EarlyStopping, ModelCheckpoint# from sklearn import preprocessingfrom sklearn.model_selection import train_test_splitfrom model import *def train_validation_split(x, y, num_train):    x_train = x[:num_train]    y_train = y[:num_train]    x_validation = x[num_train:]    y_validation = y[num_train:]    return x_train, y_train, x_validation, y_validationdef get_processed_data(file_name, alert_ratio=0.003, track_period=5, VERBOSE=False):    df = pd.read_csv(file_name)    df['window']=df['high']-df['low']    df = df[['high','low','window','close','volume','accprice']]    # go through original data set to put label of the classification problem    all_y = []    last_price = 0.0    track_count = 0    for idx, row in df.iterrows():        if track_count != track_period:            track_count += 1        else:            if row['close'] > last_price and (row['close']-last_price)/last_price > alert_ratio:                all_y.append(np.array([0,1,0]))            elif row['close'] < last_price and (last_price-row['close'])/last_price > alert_ratio:                all_y.append(np.array([0,0,1]))            else:                all_y.append(np.array([1,0,0]))            track_count = 0        last_price = row['close']    y = np.array(all_y)    # Scale Data    df=(df-df.mean())/df.std()    all_x = []    tmp_x_row = []    track_count = 0    for idx, row in df.iterrows():        if track_count != track_period:            x = np.array([row['window'],row['high'],row['low'],row['close'],row['volume'],row['accprice']])            tmp_x_row.append(x)            track_count += 1        else:            all_x.append(np.array(tmp_x_row))            tmp_x_row = []            track_count = 0    x = np.array(all_x)    if VERBOSE:        print('Data Pre-process Done.')        print('Shape of X: {}'.format(x.shape))        print('Shape of y: {}'.format(y.shape))    return x, yif __name__ == '__main__':    file = sys.argv[1]    track_minutes = 8    alert_percentage = 0.000    x, y = get_processed_data(file_name=file, track_period=track_minutes, alert_ratio=alert_percentage, VERBOSE=True)    x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.15, random_state=777)    #print(y)    opt = RMSprop(lr=0.001, decay=1e-6, clipvalue=0.5)    model = get_model(opt=opt, input_shape=(x_train.shape[1],x_train.shape[2]))    earlystopping = EarlyStopping(monitor='val_loss', patience = 20, verbose=1)    checkpoint = ModelCheckpoint(filepath='trybest.hdf5',verbose=1,save_best_only=True, save_weights_only=True, monitor='val_loss')    model.fit(x_train, y_train, epochs=30, batch_size=256, validation_data=(x_val, y_val), callbacks=[earlystopping,checkpoint])    model.save('testing.h5')